<?php

/**
 *	_task_ctlr auto-generated by awareness
 */

class _task_ctlr extends _ctlr
{
	public function __construct()
	{
		parent::__construct( '_task' );
		$this->log_chan( '_task_ctlr' )->log_lvl( 'error' );
	}

	public function get_my_open_tasks()
	{
		$o__mem = new _mem();
		$_mem_id = $o__mem->me( '_mem_id' );
		$tasks = $this->obj->get_tasks_by__mem_id( $_mem_id, 0 );
		if( FALSE === $tasks )
		{
			$this->fail( $this->obj->get_error_msg() );
			return FALSE;
		}

		$this->success( 'open_tasks_fetched' );
		return $tasks;
	}

	public function get_my_completed_tasks()
	{
		$o__mem = new _mem();
		$_mem_id = $o__mem->me( '_mem_id' );
		$tasks = $this->obj->get_tasks_by__mem_id( $_mem_id, 1 );
		if( FALSE === $tasks )
		{
			$this->fail( $this->obj->get_error_msg() );
			return FALSE;
		}

		$this->success( 'completed_tasks_fetched' );
		return $tasks;
	}

	public function get_my_incomplete_tasks()
	{
		$o__mem = new _mem();
		$_mem_id = $o__mem->me( '_mem_id' );
		$tasks = $this->obj->get_tasks_by__mem_id( $_mem_id, -1 );
		if( FALSE === $tasks )
		{
			$this->fail( $this->obj->get_error_msg() );
			return FALSE;
		}

		$this->success( 'incomplete_tasks_fetched' );
		return $tasks;
	}

	public function save() : bool
	{
		if( _POST['_task_due_date'] )
		{
			try
			{
				$due = new DateTime(_POST['_task_due_date']);
				$now = new DateTime();
			}
			catch( DateException $de )
			{
				$this->log_data( $de )->log_msg( 'DateException on task save' );
				$this->fail('invalid_due_date');
				return FALSE;
			}

			if ($due < $now)
			{
				$this->fail('due_date_in_past');
				return FALSE;
			}
		}

		$o__mem = new _mem();
		$_mem_id = $o__mem->me( '_mem_id' );

		$task = _POST;
		$task['fk__mem_id'] = $_mem_id;

		$saved_task = $this->obj->save_task( $task );
		if( FALSE === $saved_task )
		{
			$this->fail( $this->obj->get_error_msg() );
			return FALSE;
		}

		$this->success( 'task_saved' );
		return $saved_task;
	}
}
